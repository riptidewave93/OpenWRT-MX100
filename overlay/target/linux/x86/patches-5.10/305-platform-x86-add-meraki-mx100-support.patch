diff -Naur linux-5.10.37-untouched/drivers/platform/x86/Kconfig linux-5.10.37/drivers/platform/x86/Kconfig
--- linux-5.10.37-untouched/drivers/platform/x86/Kconfig	2021-05-20 19:47:20.496625792 -0500
+++ linux-5.10.37/drivers/platform/x86/Kconfig	2021-05-20 20:34:33.440565959 -0500
@@ -302,6 +302,18 @@
 	  If you have an ACPI-WMI compatible Eee PC laptop (>= 1000), say Y or M
 	  here.
 
+config MERAKI_MX100
+	tristate "Cisco Meraki MX100 Platform Driver"
+	depends on GPIOLIB
+	depends on LEDS_CLASS
+	select LEDS_GPIO
+	help
+	  This driver provides support for the front button and LEDs on
+	  the Cisco Meraki MX100 (Tinkerbell) 1U appliance.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called meraki-mx100.
+
 config DCDBAS
 	tristate "Dell Systems Management Base Driver"
 	depends on X86
diff -Naur linux-5.10.37-untouched/drivers/platform/x86/Makefile linux-5.10.37/drivers/platform/x86/Makefile
--- linux-5.10.37-untouched/drivers/platform/x86/Makefile	2021-05-20 19:47:20.496625792 -0500
+++ linux-5.10.37/drivers/platform/x86/Makefile	2021-05-20 20:32:17.699977088 -0500
@@ -33,6 +33,9 @@
 obj-$(CONFIG_EEEPC_LAPTOP)	+= eeepc-laptop.o
 obj-$(CONFIG_EEEPC_WMI)		+= eeepc-wmi.o
 
+# Cisco/Meraki
+obj-$(CONFIG_MERAKI_MX100)		+= meraki-mx100.o
+
 # Dell
 obj-$(CONFIG_DCDBAS)			+= dcdbas.o
 obj-$(CONFIG_DELL_SMBIOS)		+= dell-smbios.o
diff -Naur linux-5.10.37-untouched/drivers/platform/x86/meraki-mx100.c linux-5.10.37/drivers/platform/x86/meraki-mx100.c
--- linux-5.10.37-untouched/drivers/platform/x86/meraki-mx100.c	1969-12-31 18:00:00.000000000 -0600
+++ linux-5.10.37/drivers/platform/x86/meraki-mx100.c	2021-05-20 21:09:18.866824546 -0500
@@ -0,0 +1,219 @@
+// SPDX-License-Identifier: GPL-2.0+
+
+/*
+ * Cisco Meraki MX100 (Tinkerbell) board platform driver
+ *
+ * Based off of arch/x86/platform/meraki/tink.c from the
+ * Meraki GPL release meraki-firmware-sources-r23-20150601
+ *
+ * Format inspired by platform/x86/pcengines-apuv2.c
+ *
+ * Copyright (C) 2021 Chris Blake <chrisrblake93@gmail.com>
+ */
+
+#define pr_fmt(fmt)	KBUILD_MODNAME ": " fmt
+
+#include <linux/dmi.h>
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <linux/kernel.h>
+#include <linux/leds.h>
+#include <linux/leds-nu801.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+
+#define TINK_GPIO_OFFSET	462
+
+/* LEDs */
+
+static const struct gpio_led tink_leds[] = {
+        {
+                .name = "mx100:green:internet", 
+                .gpio = TINK_GPIO_OFFSET + 11,
+                .active_low = 1,
+                .default_trigger = "default-on",
+        },
+        {
+                .name = "mx100:green:lan2",
+                .gpio = TINK_GPIO_OFFSET + 18,
+        },
+        {
+                .name = "mx100:green:lan3",
+                .gpio = TINK_GPIO_OFFSET + 20,
+        },
+        {
+                .name = "mx100:green:lan4",
+                .gpio = TINK_GPIO_OFFSET + 22,
+        },
+        {
+                .name = "mx100:green:lan5",
+                .gpio = TINK_GPIO_OFFSET + 23,
+        },
+        {
+                .name = "mx100:green:lan6",
+                .gpio = TINK_GPIO_OFFSET + 32,
+        },
+        {
+                .name = "mx100:green:lan7",
+                .gpio = TINK_GPIO_OFFSET + 34,
+        },
+        {
+                .name = "mx100:green:lan8",
+                .gpio = TINK_GPIO_OFFSET + 35,
+        },
+        {
+                .name = "mx100:green:lan9",
+                .gpio = TINK_GPIO_OFFSET + 36,
+        },
+        {
+                .name = "mx100:green:lan10",
+                .gpio = TINK_GPIO_OFFSET + 37,
+        },
+        {
+                .name = "mx100:green:lan11",
+                .gpio = TINK_GPIO_OFFSET + 48,
+        },
+        {
+                .name = "mx100:green:ha",
+                .gpio = TINK_GPIO_OFFSET + 16,
+                .active_low = 1,
+        },
+        {
+                .name = "mx100:orange:ha",
+                .gpio = TINK_GPIO_OFFSET + 7,
+                .active_low = 1,
+        },
+        {
+                .name = "mx100:green:usb",
+                .gpio = TINK_GPIO_OFFSET + 21,
+                .active_low = 1,
+        },
+        {
+                .name = "mx100:orange:usb",
+                .gpio = TINK_GPIO_OFFSET + 19,
+                .active_low = 1,
+        },
+};
+
+static const struct gpio_led_platform_data tink_leds_pdata = {
+	.num_leds	= ARRAY_SIZE(tink_leds),
+	.leds		= tink_leds,
+};
+
+/* NU801 */
+
+static struct led_nu801_template tink_nu801_template = {
+    .device_name = "mx100",
+    .name = "tricolor",
+    .num_leds = 1,
+    .cki = TINK_GPIO_OFFSET + 41,
+    .sdi = TINK_GPIO_OFFSET + 6,
+    .lei = TINK_GPIO_OFFSET + 5,
+    .ndelay = 150,
+    .init_brightness = {
+        LED_OFF,
+        LED_OFF,
+        LED_OFF,
+    },
+    .default_trigger = "none",
+    .led_colors = { "blue", "green", "red" },
+};
+
+static struct led_nu801_platform_data tink_nu801_pdata = {
+    .num_controllers = 1,
+    .template = &tink_nu801_template,
+};
+
+/* Reset Button */
+
+static struct gpio_keys_button tink_buttons[] = {
+	{
+		.code			= KEY_RESTART,
+		.active_low		= 1,
+		.desc			= "Reset",
+		.type			= EV_KEY,
+		.gpio			= TINK_GPIO_OFFSET + 60,
+		.debounce_interval      = 10,
+	},
+};
+
+static const struct gpio_keys_platform_data tink_buttons_pdata = {
+	.buttons	= tink_buttons,
+	.nbuttons	= ARRAY_SIZE(tink_buttons),
+	.poll_interval  = 100,
+	.rep		= 0,
+	.name		= "mx100-keys",
+};
+
+/* Board setup */
+
+static struct platform_device *tink_nu801_pdev;
+static struct platform_device *tink_leds_pdev;
+static struct platform_device *tink_keys_pdev;
+
+static struct platform_device * __init tink_create_dev(
+	const char *name,
+	const void *pdata,
+	size_t sz)
+{
+	struct platform_device *pdev;
+
+	pdev = platform_device_register_data(NULL,
+		name,
+		PLATFORM_DEVID_NONE,
+		pdata,
+		sz);
+
+	if (IS_ERR(pdev))
+		pr_err("failed registering %s: %ld\n", name, PTR_ERR(pdev));
+
+	return pdev;
+}
+
+static int __init tink_board_init(void)
+{
+	const char *vendor, *product;
+
+	vendor = dmi_get_system_info(DMI_SYS_VENDOR);
+	product = dmi_get_system_info(DMI_PRODUCT_NAME);
+
+	if (!vendor || strcmp(vendor, "Cisco") || !product || strcmp(product, "MX100-HW")) {
+		pr_err("Failed to detect Meraki MX100 via DMI!\n");
+		return -ENODEV;
+	}
+
+	tink_nu801_pdev = tink_create_dev(
+		"leds-nu801",
+		&tink_nu801_pdata,
+		sizeof(tink_nu801_pdata));
+
+	tink_leds_pdev = tink_create_dev(
+		"leds-gpio",
+		&tink_leds_pdata,
+		sizeof(tink_leds_pdata));
+
+	tink_keys_pdev = tink_create_dev(
+		"gpio-keys-polled",
+		&tink_buttons_pdata,
+		sizeof(tink_buttons_pdata));
+
+	return 0;
+}
+
+static void __exit tink_board_exit(void)
+{
+	platform_device_unregister(tink_keys_pdev);
+	platform_device_unregister(tink_leds_pdev);
+	platform_device_unregister(tink_nu801_pdev);
+}
+
+module_init(tink_board_init);
+module_exit(tink_board_exit);
+
+MODULE_AUTHOR("Chris Blake <chrisrblake93@gmail.com>");
+MODULE_DESCRIPTION("Cisco Meraki MX100 Platform Driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:meraki-mx100");
+MODULE_SOFTDEP("pre: platform:lpc_ich platform:leds-gpio platform:leds-nu801 platform:gpio_keys_polled");
